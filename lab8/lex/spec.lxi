%{
%}

%option noyywrap
%option caseless

INTEGER				[+-]?[1-9][0-9]*|0
CHARACTER			\'[A-Za-z0-9 ]\'
STRING 				\"[^"]*\"
IDENTIFIER			[A-Za-z][A-Za-z0-9_]*
BOOLEAN 			true|false

%%

[ \t\n] 

and {printf("RESERVED WORD:   %s\n", yytext);  }
array {printf("RESERVED WORD:   %s\n", yytext);  }
begin {printf("RESERVED WORD:   %s\n", yytext);  }
boolean {printf("RESERVED WORD:   %s\n", yytext);  }
char {printf("RESERVED WORD:   %s\n", yytext);  }
const {printf("RESERVED WORD:   %s\n", yytext);  }
do {printf("RESERVED WORD:   %s\n", yytext);  }
else {printf("RESERVED WORD:   %s\n", yytext);  }
end {printf("RESERVED WORD:   %s\n", yytext);  }
for {printf("RESERVED WORD:   %s\n", yytext);  }
if {printf("RESERVED WORD:   %s\n", yytext);  }
inputLine {printf("RESERVED WORD:   %s\n", yytext);  }
integer {printf("RESERVED WORD:   %s\n", yytext);  }
of {printf("RESERVED WORD:   %s\n", yytext);  }
or {printf("RESERVED WORD:   %s\n", yytext);  }
outputLine {printf("RESERVED WORD:   %s\n", yytext);  }
program {printf("RESERVED WORD:   %s\n", yytext);  }
record {printf("RESERVED WORD:   %s\n", yytext);  }
string {printf("RESERVED WORD:   %s\n", yytext);  }
then {printf("RESERVED WORD:   %s\n", yytext);  }
to {printf("RESERVED WORD:   %s\n", yytext);  }
type {printf("RESERVED WORD:   %s\n", yytext);  }
var {printf("RESERVED WORD:   %s\n", yytext);  }
while {printf("RESERVED WORD:   %s\n", yytext);  }
xor {printf("RESERVED WORD:   %s\n", yytext);  }

\; {printf("SEPARATOR:       %s\n", yytext);  }
\: {printf("SEPARATOR:       %s\n", yytext);  }
\, {printf("SEPARATOR:       %s\n", yytext);  }
\. {printf("SEPARATOR:       %s\n", yytext);  }
".." {printf("SEPARATOR:       %s\n", yytext);  }
\( {printf("SEPARATOR:       %s\n", yytext);  }
\) {printf("SEPARATOR:       %s\n", yytext);  }
\[ {printf("SEPARATOR:       %s\n", yytext);  }
\] {printf("SEPARATOR:       %s\n", yytext);  }

\+ {printf("OPERATOR:        %s\n", yytext);  }
- {printf("OPERATOR:        %s\n", yytext);  }
\* {printf("OPERATOR:        %s\n", yytext);  }
div {printf("OPERATOR:        %s\n", yytext);  }
mod {printf("OPERATOR:        %s\n", yytext);  }
not {printf("OPERATOR:        %s\n", yytext);  }
":=" {printf("OPERATOR:        %s\n", yytext);  }
\< {printf("OPERATOR:        %s\n", yytext);  }
"<=" {printf("OPERATOR:        %s\n", yytext);  }
= {printf("OPERATOR:        %s\n", yytext);  }
"<>" {printf("OPERATOR:        %s\n", yytext);  }
">=" {printf("OPERATOR:        %s\n", yytext);  }
\> {printf("OPERATOR:        %s\n", yytext);  }

{INTEGER} {printf("CONST INTEGER:   %s\n", yytext);  }
{BOOLEAN} {printf("CONST BOOLEAN:   %s\n", yytext);  }
{CHARACTER} {printf("CONST CHARACTER: %s\n", yytext);  }
{STRING} {printf("CONST STRING:    %s\n", yytext);  }

{IDENTIFIER} {printf("IDENTIFIER:      %s\n", yytext);  }

\#.*

. {printf("Error %s\n", yytext);  }

%% 
main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc;
    if ( argc > 0 ) 
    yyin = fopen( argv[0], "r" ); 
    else 
     yyin = stdin; 
    yylex(); 
}